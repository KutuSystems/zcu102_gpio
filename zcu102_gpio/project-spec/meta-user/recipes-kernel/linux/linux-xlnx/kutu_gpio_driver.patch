diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index c28dca0..d1c489a 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -391,6 +391,13 @@ config R3964
 
 	  If unsure, say N.
 
+config KUTU_GPIO
+	tristate "KUTU GPIO support"
+	depends on HAS_IOMEM
+	select GENERIC_IRQ_CHIP
+	help
+	  Choose this if you have Kutu GPIO module in fgpa system
+
 config APPLICOM
 	tristate "Applicom intelligent fieldbus card support"
 	depends on PCI
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index 7dc3abe..3c4f690 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -36,6 +36,7 @@ endif
 obj-$(CONFIG_TOSHIBA)		+= toshiba.o
 obj-$(CONFIG_DS1620)		+= ds1620.o
 obj-$(CONFIG_HW_RANDOM)		+= hw_random/
+obj-$(CONFIG_KUTU_GPIO)	+= kutu_gpio/
 obj-$(CONFIG_PPDEV)		+= ppdev.o
 obj-$(CONFIG_NWBUTTON)		+= nwbutton.o
 obj-$(CONFIG_NWFLASH)		+= nwflash.o
diff --git a/drivers/char/kutu_gpio/Makefile b/drivers/char/kutu_gpio/Makefile
new file mode 100755
index 0000000..e90d833
--- /dev/null
+++ b/drivers/char/kutu_gpio/Makefile
@@ -0,0 +1,2 @@
+kutu-gpio-drv-y := kutu-gpio.o
+obj-$(CONFIG_KUTU_GPIO) += kutu-gpio-drv.o
diff --git a/drivers/char/kutu_gpio/kutu-gpio-system.h b/drivers/char/kutu_gpio/kutu-gpio-system.h
new file mode 100644
index 0000000..4d14a6c
--- /dev/null
+++ b/drivers/char/kutu_gpio/kutu-gpio-system.h
@@ -0,0 +1,145 @@
+/*
+ *  KUTU_GPIO_system.h -- Register definitions for KUTU_GPIO implementation
+ *
+ *  Greg Smart
+ *
+ *  Version 0.1 18/10/18
+ *
+ */
+
+/*--------------------------------------------------------------------
+ *
+ *  KUTU_GPIO register include file
+ *  This file contains all the macros and defines needed by the driver
+ *  and user programs using it.
+ *
+ *--------------------------------------------------------------------*/
+
+#ifndef _KUTU_GPIO_SYSTEM_H
+#define _KUTU_GPIO_SYSTEM_H
+
+/* general register memory location */
+#define R_KUTU_GPIO_REG_BASE			0x0000
+
+// FPGA user read/write registers.
+// address decoder uses bits 5..2 => address offsets of 0x00..0x3C
+#define R_WRITE_ADDR		      0x0000
+#define R_READ_ADDR			   0x0000
+#define R_DIRECTION_ADDR	   0x0004
+#define R_READBACK_WR_ADDR    0x0008
+
+#define DEFAULT_OUTPUT_VAL    0x00000000
+#define DEFAULT_DIRECTION_VAL 0xffffffff
+
+
+/*
+ * interrupt constants
+ */
+#define K_ENABLE_INTERRUPT       0x01
+#define K_DISABLE_INTERRUPT      0x02
+#define K_CLEAR_INTERRUPT        0x03
+
+
+/*
+ *  struct KUTU_GPIO_axi_lite_base.
+ *  This structure provides general access for the 3 blocks within the system
+ */
+
+struct KUTU_GPIO_axi_lite_base {
+   u32                           registers[512];
+   u32                           fifo[512];
+   u32                           bram[1024];
+} ;
+
+/*
+ *  struct KUTU_GPIO_registers.
+ *  This structure points to the first block where the registers are located
+ */
+
+struct KUTU_GPIO_registers {
+   u32                           pulse_rate_gen;      // 0x0
+   u32                           pulse_width_gen;     // 0x4
+   u32                           sweep_test;          // 0x8
+   u32                           run_test;            // 0xC
+   u32                           data_read_addr;      // 0x10
+   u32                           data_read_stride;    // 0x14
+} ;
+
+#define MAX_DEVICES     4
+
+/**
+ * struct KUTU_GPIO_drvdata - Device Configuration driver structure
+ *
+ * @dev: Pointer to the device structure
+ * @cdev: Instance of the cdev structure
+ * @devt: Pointer to the dev_t structure
+ * @class: Pointer to device class
+ * @fclk_class: Pointer to fclk device class
+ * @dma_done: The dma_done status bit for the DMA command completion
+ * @error_status: The error status captured during the DMA transfer
+ * @irq: Interrupt number
+ * @clk: Peripheral clock for devcfg
+ * @fclk: Array holding references to the FPGA clocks
+ * @fclk_exported: Flag inidcating whether an FPGA clock is exported
+ * @is_open: The status bit to indicate whether the device is opened
+ * @sem: Instance for the mutex
+ * @lock: Instance of spinlock
+ * @base_address: The virtual device base address of the device registers
+ * @is_partial_bitstream: Status bit to indicate partial/full bitstream
+ */
+struct KUTU_GPIO_drvdata {
+   struct device *dev;
+   struct cdev cdev;
+   dev_t devt;
+   struct class *class;
+   int irq;
+   atomic_t irq_count;
+   struct clk *clk;
+   bool is_open;
+   spinlock_t lock;
+   void __iomem *base;
+   uint8_t tclkState;
+   struct list_head dev_list;
+   wait_queue_head_t irq_wait_queue;
+};
+
+static inline void KUTU_GPIO_write_reg(struct KUTU_GPIO_drvdata *KUTU_GPIO, size_t reg, uint32_t val)
+{
+    writel(val, KUTU_GPIO->base + reg);
+}
+
+static inline uint32_t KUTU_GPIO_read_reg(struct KUTU_GPIO_drvdata *KUTU_GPIO, size_t reg)
+{
+    return readl(KUTU_GPIO->base + reg);
+}
+
+
+//
+//  Prototypes
+//
+
+//
+// KUTU_GPIO_Open()
+//
+// Open KUTU_GPIO system and mmap registers for user access.
+//
+// Returns pointer to virtual address.
+//
+u32 KUTU_GPIO_Open(u32 init_fpga);
+
+//
+// KUTU_GPIO_Close()
+//
+// Close KUTU_GPIO system and unmap memory.  Function is called with
+// virtual address that was returned when opened.
+//
+u32 KUTU_GPIO_Close(int fd);
+
+//
+// KUTU_GPIO_Set_User_Mode()
+//
+// Setup the system configuration
+//
+int KUTU_GPIO_Set_User_Mode(struct KUTU_GPIO_drvdata *KUTU_GPIO, void *user_ptr);
+
+#endif /* _KUTU_GPIO_SYSTEM_H */
diff --git a/drivers/char/kutu_gpio/kutu-gpio.c b/drivers/char/kutu_gpio/kutu-gpio.c
new file mode 100644
index 0000000..835a0c7
--- /dev/null
+++ b/drivers/char/kutu_gpio/kutu-gpio.c
@@ -0,0 +1,273 @@
+/*
+ * Wrapper Driver used to control a two-channel Xilinx DMA Engine
+ */
+
+#include <linux/module.h>
+#include <linux/version.h>
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/kdev_t.h>
+#include <linux/of.h>
+#include <linux/fs.h>
+#include <linux/device.h>
+#include <linux/cdev.h>
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <linux/poll.h>
+#include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
+#include <linux/time.h>
+
+#include "kutu-gpio.h"
+#include "kutu-gpio-system.h"
+
+#define DRIVER_NAME "kutu-gpio"
+#define MODULE_NAME "kutu-gpio"
+#define KUTU_GPIO_DEVICES 4
+
+LIST_HEAD( KUTU_GPIO_full_dev_list );
+
+
+static int KUTU_GPIO_open(struct inode *i, struct file *filp)
+{
+   struct KUTU_GPIO_drvdata *KUTU_GPIO;
+
+   KUTU_GPIO = container_of(i->i_cdev, struct KUTU_GPIO_drvdata, cdev);
+
+   atomic_set(&KUTU_GPIO->irq_count, 0);
+
+   //init_waitqueue_head(&KUTU_GPIO->irq_wait_queue);
+
+//   printk(KERN_DEBUG "<%s> file: open()\n", MODULE_NAME);
+   filp->private_data = KUTU_GPIO;
+   return 0;
+}
+
+static int KUTU_GPIO_release(struct inode *i, struct file *f)
+{
+   struct KUTU_GPIO_drvdata *KUTU_GPIO;
+
+   KUTU_GPIO = container_of(i->i_cdev, struct KUTU_GPIO_drvdata, cdev);
+
+//   KUTU_GPIO_write_reg(KUTU_GPIO, R_INTERRUPT_ADDR, K_DISABLE_INTERRUPT);
+//   KUTU_GPIO_write_reg(KUTU_GPIO, R_MODE_CONFIG_ADDR, MODE_PPS_DEBUG);
+
+//   printk(KERN_DEBUG "<%s> file: close()\n", MODULE_NAME);
+   return 0;
+}
+
+
+static long KUTU_GPIO_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
+{
+   struct KUTU_GPIO_drvdata *KUTU_GPIO = filp->private_data;
+   void  *arg_ptr = (void *)arg;
+   long  ret = 0;
+   unsigned int val;
+   struct KUTU_GPIO_debug_struct debug_cmd;
+
+   //printk(KERN_DEBUG "<%s> ioctl: entered KUTU_GPIO_ioctl\n", MODULE_NAME);
+
+   switch (cmd) {
+
+      case KUTU_GPIO_USER_SETDIR:
+         KUTU_GPIO_write_reg(KUTU_GPIO, R_DIRECTION_ADDR, arg);
+         return 0;
+
+      case KUTU_GPIO_USER_WRITE_OUTPUT:
+         KUTU_GPIO_write_reg(KUTU_GPIO, R_WRITE_ADDR, arg);
+         return 0;
+
+      case KUTU_GPIO_USER_READ_INPUT:
+         val = KUTU_GPIO_read_reg(KUTU_GPIO, R_READ_ADDR);
+         if (copy_to_user(arg_ptr, &val, sizeof(val))) {
+            return -EFAULT;
+         }
+         return 0;
+
+      case KUTU_GPIO_USER_READBACK_OUTPUT:
+         val = KUTU_GPIO_read_reg(KUTU_GPIO, R_READBACK_WR_ADDR);
+         if (copy_to_user(arg_ptr, &val, sizeof(val))) {
+            return -EFAULT;
+         }
+         return 0;
+
+      case KUTU_GPIO_USER_REG_DEBUG:
+         if (copy_from_user(&debug_cmd, arg_ptr, sizeof(debug_cmd))) {
+            printk(KERN_DEBUG "KUTU_GPIO_REG_DEBUG: copy failed\n");
+
+            return -EFAULT;
+         }
+
+         if (debug_cmd.cmd == KUTU_GPIO_DEBUG_WRITE){
+            KUTU_GPIO_write_reg(KUTU_GPIO, debug_cmd.reg, debug_cmd.data);
+            return 0;
+         }
+
+         if (debug_cmd.cmd == KUTU_GPIO_DEBUG_READ)
+            debug_cmd.data = KUTU_GPIO_read_reg(KUTU_GPIO, debug_cmd.reg);
+
+         if (copy_to_user(arg_ptr, &debug_cmd, sizeof(debug_cmd))) {
+            return -EFAULT;
+         }
+         return 0;
+
+      default:
+	      break;
+
+   } // switch
+
+   return ret;
+}
+
+/**
+ * KUTU_GPIO_isr() - The main interrupt handler.
+ * @irq:	The interrupt number.
+ * @data:	Pointer to the driver data structure.
+ * returns: IRQ_HANDLED after the interrupt is handled.
+ **/
+static irqreturn_t KUTU_GPIO_isr(int irq, void *data)
+{
+	struct KUTU_GPIO_drvdata *MSP = data;
+
+	spin_lock(&MSP->lock);
+
+	spin_unlock(&MSP->lock);
+
+	return IRQ_HANDLED;
+}
+
+static const struct file_operations KUTU_GPIO_fops = {
+   .owner = THIS_MODULE,
+   .unlocked_ioctl = KUTU_GPIO_ioctl,
+   .open = KUTU_GPIO_open,
+   .release = KUTU_GPIO_release,
+};
+
+static const struct of_device_id KUTU_GPIO_of_match_table[] = {
+   { .compatible = "kutu,kutu-gpio-controller-1.00-a", (void *)&KUTU_GPIO_fops },
+   { .compatible = "xlnx,kutu-gpio-1.0", (void *)&KUTU_GPIO_fops },
+   { },
+};
+MODULE_DEVICE_TABLE(of, KUTU_GPIO_of_match_table);
+
+static int KUTU_GPIO_probe(struct platform_device *pdev)
+{
+   const struct of_device_id *id;
+   struct resource *mem;
+   struct KUTU_GPIO_drvdata *KUTU_GPIO;
+   dev_t devt;
+   int ret;
+   struct device *dev;
+
+   if (!pdev->dev.of_node)
+      return -ENODEV;
+
+   id = of_match_node(KUTU_GPIO_of_match_table, pdev->dev.of_node);
+   if (!id)
+      return -EINVAL;
+
+   KUTU_GPIO = devm_kzalloc(&pdev->dev, sizeof(*KUTU_GPIO), GFP_KERNEL);
+   if (!KUTU_GPIO)
+      return -ENOMEM;
+
+   dev_info(&pdev->dev, "Kutu KUTU_GPIO trying to call platform get resource\n");
+
+   mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+   KUTU_GPIO->base = devm_ioremap_resource(&pdev->dev, mem);
+
+   if (IS_ERR(KUTU_GPIO->base))
+      return PTR_ERR(KUTU_GPIO->base);
+
+   // setup registers
+   KUTU_GPIO_write_reg(KUTU_GPIO, R_WRITE_ADDR, DEFAULT_OUTPUT_VAL);
+   KUTU_GPIO_write_reg(KUTU_GPIO, R_DIRECTION_ADDR, DEFAULT_DIRECTION_VAL);
+
+   dev_info(&pdev->dev, "KUTU_GPIO finished call to platform get resource\n");
+
+   platform_set_drvdata(pdev, KUTU_GPIO);
+   spin_lock_init(&KUTU_GPIO->lock);
+
+   KUTU_GPIO->is_open = 0;
+   dev_info(&pdev->dev, "ioremap %pa to %p\n", &mem->start, KUTU_GPIO->base);
+
+   ret = alloc_chrdev_region(&devt, 0, KUTU_GPIO_DEVICES, DRIVER_NAME);
+   if (ret < 0)
+      goto failed5;
+   dev_info(&pdev->dev, "Successfully allocated chrdev region\n");
+
+   KUTU_GPIO->devt = devt;
+
+   cdev_init(&KUTU_GPIO->cdev, &KUTU_GPIO_fops);
+   KUTU_GPIO->cdev.owner = THIS_MODULE;
+   ret = cdev_add(&KUTU_GPIO->cdev, devt, 1);
+   if (ret) {
+      dev_err(&pdev->dev, "cdev_add() failed\n");
+      goto failed6;
+   }
+
+   KUTU_GPIO->class = class_create(THIS_MODULE, DRIVER_NAME);
+   if (IS_ERR(KUTU_GPIO->class)) {
+      dev_err(&pdev->dev, "failed to create class\n");
+      goto failed6;
+   }
+
+   dev = device_create(KUTU_GPIO->class, &pdev->dev, devt, KUTU_GPIO, DRIVER_NAME);
+   if (IS_ERR(dev)) {
+      dev_err(&pdev->dev, "unable to create device\n");
+      goto failed7;
+   }
+   dev_info(&pdev->dev, "Successfully created device\n");
+
+   init_waitqueue_head(&KUTU_GPIO->irq_wait_queue);
+
+   //platform_driver_register(pdev);
+   dev_info(&pdev->dev, "Kutu KUTU_GPIO finished loading driver\n");
+
+   return 0;
+
+failed7:
+   class_destroy(KUTU_GPIO->class);
+failed6:
+   /* Unregister char driver */
+   unregister_chrdev_region(devt, KUTU_GPIO_DEVICES);
+failed5:
+
+   return ret;
+}
+
+static int KUTU_GPIO_remove(struct platform_device *pdev)
+{
+   struct KUTU_GPIO_drvdata *KUTU_GPIO;
+
+   KUTU_GPIO = platform_get_drvdata(pdev);
+
+   if (!KUTU_GPIO)
+      return -ENODEV;
+
+   unregister_chrdev_region(KUTU_GPIO->devt, KUTU_GPIO_DEVICES);
+
+   //	sysfs_remove_group(&pdev->dev.kobj, &KUTU_GPIO_attr_group);
+
+   device_destroy(KUTU_GPIO->class, KUTU_GPIO->devt);
+   class_destroy(KUTU_GPIO->class);
+   cdev_del(&KUTU_GPIO->cdev);
+   clk_unprepare(KUTU_GPIO->clk);
+
+   return 0;
+}
+
+static struct platform_driver KUTU_GPIO_driver = {
+   .probe = KUTU_GPIO_probe,
+   .remove = KUTU_GPIO_remove,
+   .driver = {
+   .name = "kutu-gpio",
+   .of_match_table = KUTU_GPIO_of_match_table,
+   },
+};
+module_platform_driver(KUTU_GPIO_driver);
+
+MODULE_AUTHOR("Kutu Pty Ltd");
+MODULE_DESCRIPTION("Kutu GPIO Linux driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/char/kutu_gpio/kutu-gpio.h b/drivers/char/kutu_gpio/kutu-gpio.h
new file mode 100644
index 0000000..36ea3ee
--- /dev/null
+++ b/drivers/char/kutu_gpio/kutu-gpio.h
@@ -0,0 +1,79 @@
+/*
+ *  kutu-gpio.h -- Register definitions for Kutu GPIO driver
+ *
+ *  Greg Smart
+ *
+ *  Version 1.0 18/10/18
+ *
+ */
+
+#ifndef _KUTU_GPIO_H
+#define _KUTU_GPIO_H
+
+
+
+#define KUTU_GPIO_DEBUG_READ        	(1)
+#define KUTU_GPIO_DEBUG_WRITE       	(2)
+#define KUTU_GPIO_DEBUG_DMA_READ    	(3)
+#define KUTU_GPIO_DEBUG_DMA_WRITE   	(4)
+
+/*
+** Status constants
+*/
+#define BIT_PORT0       (0x00000001)
+#define BIT_PORT1       (0x00000002)
+#define BIT_PORT2       (0x00000004)
+#define BIT_PORT3       (0x00000008)
+#define BIT_PORT4       (0x00000010)
+#define BIT_PORT5       (0x00000020)
+#define BIT_PORT6       (0x00000040)
+#define BIT_PORT7       (0x00000080)
+
+
+enum KUTU_GPIO_user_cmds
+{
+   KUTU_GPIO_USER_SETDIR,
+   KUTU_GPIO_USER_WRITE_OUTPUT,
+   KUTU_GPIO_USER_READ_INPUT,
+   KUTU_GPIO_USER_READBACK_OUTPUT,
+   KUTU_GPIO_USER_REG_DEBUG
+};
+
+struct KUTU_GPIO_debug_struct {
+   __u32                           cmd;
+   __u32                           reg;
+   __u32                           data;
+} ;
+
+
+/*
+ *  struct KUTU_GPIO_cmd_struct.
+ *  This structure points to the first block where the registers are located
+ */
+
+struct KUTU_GPIO_cmd_struct {
+   __u32                            config;
+   __u32                            interrupt;
+   __u32                            address;
+   __u32                            capture_count;
+   __u32                            delay_count;
+   __u32                            peak_detect_start;
+   __u32                            peak_detect_end;
+   __s32                            adc_offset;
+} ;
+
+
+/*
+ *  IOCTL definitions.
+ */
+
+#define KUTU_GPIO_IOCTL_BASE	't'
+
+#define KUTU_GPIO_USER_SETDIR                     _IOWR(KUTU_GPIO_IOCTL_BASE, 0x80, struct KUTU_GPIO_cmd_struct)
+#define KUTU_GPIO_USER_WRITE_OUTPUT               _IOWR(KUTU_GPIO_IOCTL_BASE, 0x81, struct KUTU_GPIO_cmd_struct)
+#define KUTU_GPIO_USER_READ_INPUT                 _IOWR(KUTU_GPIO_IOCTL_BASE, 0x82, struct KUTU_GPIO_cmd_struct)
+#define KUTU_GPIO_USER_READBACK_OUTPUT            _IOWR(KUTU_GPIO_IOCTL_BASE, 0x83, struct KUTU_GPIO_cmd_struct)
+#define KUTU_GPIO_USER_REG_DEBUG                  _IOWR(KUTU_GPIO_IOCTL_BASE, 0x84, struct KUTU_GPIO_debug_struct)
+
+
+#endif /* _KUTU_GPIO_H */
